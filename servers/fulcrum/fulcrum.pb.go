// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: fulcrum.proto

package fulcrum

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FulcrumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Request string `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *FulcrumRequest) Reset() {
	*x = FulcrumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fulcrum_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FulcrumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FulcrumRequest) ProtoMessage() {}

func (x *FulcrumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fulcrum_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FulcrumRequest.ProtoReflect.Descriptor instead.
func (*FulcrumRequest) Descriptor() ([]byte, []int) {
	return file_fulcrum_proto_rawDescGZIP(), []int{0}
}

func (x *FulcrumRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FulcrumRequest) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

type FulcrumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *FulcrumResponse) Reset() {
	*x = FulcrumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fulcrum_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FulcrumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FulcrumResponse) ProtoMessage() {}

func (x *FulcrumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fulcrum_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FulcrumResponse.ProtoReflect.Descriptor instead.
func (*FulcrumResponse) Descriptor() ([]byte, []int) {
	return file_fulcrum_proto_rawDescGZIP(), []int{1}
}

func (x *FulcrumResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

var File_fulcrum_proto protoreflect.FileDescriptor

var file_fulcrum_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x66, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x22, 0x3e, 0x0a, 0x0e, 0x46, 0x75, 0x6c, 0x63,
	0x72, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2d, 0x0a, 0x0f, 0x46, 0x75, 0x6c, 0x63,
	0x72, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x87, 0x04, 0x0a, 0x0e, 0x46, 0x75, 0x6c, 0x63,
	0x72, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x17, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x75,
	0x6c, 0x63, 0x72, 0x75, 0x6d, 0x12, 0x17, 0x2e, 0x66, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x2e,
	0x46, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x66, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x2e, 0x46, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x18,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x12, 0x17, 0x2e, 0x66, 0x75, 0x6c, 0x63, 0x72,
	0x75, 0x6d, 0x2e, 0x46, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x66, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x2e, 0x46, 0x75, 0x6c, 0x63,
	0x72, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x40, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x66, 0x75, 0x6c,
	0x63, 0x72, 0x75, 0x6d, 0x2e, 0x46, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x2e, 0x46, 0x75,
	0x6c, 0x63, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x41, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e,
	0x66, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x2e, 0x46, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d,
	0x2e, 0x46, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x66, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x2e, 0x46, 0x75,
	0x6c, 0x63, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66,
	0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x2e, 0x46, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x66, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d,
	0x2e, 0x46, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x66, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x2e, 0x46, 0x75, 0x6c, 0x63, 0x72, 0x75,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x42, 0x0a,
	0x09, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x66, 0x75, 0x6c,
	0x63, 0x72, 0x75, 0x6d, 0x2e, 0x46, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x2e, 0x46, 0x75,
	0x6c, 0x63, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x15, 0x5a, 0x13, 0x73, 0x72, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x66, 0x75, 0x6c, 0x63, 0x72, 0x75, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fulcrum_proto_rawDescOnce sync.Once
	file_fulcrum_proto_rawDescData = file_fulcrum_proto_rawDesc
)

func file_fulcrum_proto_rawDescGZIP() []byte {
	file_fulcrum_proto_rawDescOnce.Do(func() {
		file_fulcrum_proto_rawDescData = protoimpl.X.CompressGZIP(file_fulcrum_proto_rawDescData)
	})
	return file_fulcrum_proto_rawDescData
}

var file_fulcrum_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_fulcrum_proto_goTypes = []interface{}{
	(*FulcrumRequest)(nil),  // 0: fulcrum.FulcrumRequest
	(*FulcrumResponse)(nil), // 1: fulcrum.FulcrumResponse
}
var file_fulcrum_proto_depIdxs = []int32{
	0, // 0: fulcrum.FulcrumService.ConnectionBrokerFulcrum:input_type -> fulcrum.FulcrumRequest
	0, // 1: fulcrum.FulcrumService.RequestConnectionFulcrum:input_type -> fulcrum.FulcrumRequest
	0, // 2: fulcrum.FulcrumService.GetFile:input_type -> fulcrum.FulcrumRequest
	0, // 3: fulcrum.FulcrumService.SendFile:input_type -> fulcrum.FulcrumRequest
	0, // 4: fulcrum.FulcrumService.GetFileList:input_type -> fulcrum.FulcrumRequest
	0, // 5: fulcrum.FulcrumService.GetClock:input_type -> fulcrum.FulcrumRequest
	0, // 6: fulcrum.FulcrumService.SendClock:input_type -> fulcrum.FulcrumRequest
	1, // 7: fulcrum.FulcrumService.ConnectionBrokerFulcrum:output_type -> fulcrum.FulcrumResponse
	1, // 8: fulcrum.FulcrumService.RequestConnectionFulcrum:output_type -> fulcrum.FulcrumResponse
	1, // 9: fulcrum.FulcrumService.GetFile:output_type -> fulcrum.FulcrumResponse
	1, // 10: fulcrum.FulcrumService.SendFile:output_type -> fulcrum.FulcrumResponse
	1, // 11: fulcrum.FulcrumService.GetFileList:output_type -> fulcrum.FulcrumResponse
	1, // 12: fulcrum.FulcrumService.GetClock:output_type -> fulcrum.FulcrumResponse
	1, // 13: fulcrum.FulcrumService.SendClock:output_type -> fulcrum.FulcrumResponse
	7, // [7:14] is the sub-list for method output_type
	0, // [0:7] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_fulcrum_proto_init() }
func file_fulcrum_proto_init() {
	if File_fulcrum_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fulcrum_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FulcrumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fulcrum_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FulcrumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fulcrum_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fulcrum_proto_goTypes,
		DependencyIndexes: file_fulcrum_proto_depIdxs,
		MessageInfos:      file_fulcrum_proto_msgTypes,
	}.Build()
	File_fulcrum_proto = out.File
	file_fulcrum_proto_rawDesc = nil
	file_fulcrum_proto_goTypes = nil
	file_fulcrum_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FulcrumServiceClient is the client API for FulcrumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FulcrumServiceClient interface {
	ConnectionBrokerFulcrum(ctx context.Context, opts ...grpc.CallOption) (FulcrumService_ConnectionBrokerFulcrumClient, error)
	RequestConnectionFulcrum(ctx context.Context, opts ...grpc.CallOption) (FulcrumService_RequestConnectionFulcrumClient, error)
	GetFile(ctx context.Context, opts ...grpc.CallOption) (FulcrumService_GetFileClient, error)
	SendFile(ctx context.Context, opts ...grpc.CallOption) (FulcrumService_SendFileClient, error)
	GetFileList(ctx context.Context, opts ...grpc.CallOption) (FulcrumService_GetFileListClient, error)
	GetClock(ctx context.Context, opts ...grpc.CallOption) (FulcrumService_GetClockClient, error)
	SendClock(ctx context.Context, opts ...grpc.CallOption) (FulcrumService_SendClockClient, error)
}

type fulcrumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFulcrumServiceClient(cc grpc.ClientConnInterface) FulcrumServiceClient {
	return &fulcrumServiceClient{cc}
}

func (c *fulcrumServiceClient) ConnectionBrokerFulcrum(ctx context.Context, opts ...grpc.CallOption) (FulcrumService_ConnectionBrokerFulcrumClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FulcrumService_serviceDesc.Streams[0], "/fulcrum.FulcrumService/ConnectionBrokerFulcrum", opts...)
	if err != nil {
		return nil, err
	}
	x := &fulcrumServiceConnectionBrokerFulcrumClient{stream}
	return x, nil
}

type FulcrumService_ConnectionBrokerFulcrumClient interface {
	Send(*FulcrumRequest) error
	Recv() (*FulcrumResponse, error)
	grpc.ClientStream
}

type fulcrumServiceConnectionBrokerFulcrumClient struct {
	grpc.ClientStream
}

func (x *fulcrumServiceConnectionBrokerFulcrumClient) Send(m *FulcrumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fulcrumServiceConnectionBrokerFulcrumClient) Recv() (*FulcrumResponse, error) {
	m := new(FulcrumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fulcrumServiceClient) RequestConnectionFulcrum(ctx context.Context, opts ...grpc.CallOption) (FulcrumService_RequestConnectionFulcrumClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FulcrumService_serviceDesc.Streams[1], "/fulcrum.FulcrumService/RequestConnectionFulcrum", opts...)
	if err != nil {
		return nil, err
	}
	x := &fulcrumServiceRequestConnectionFulcrumClient{stream}
	return x, nil
}

type FulcrumService_RequestConnectionFulcrumClient interface {
	Send(*FulcrumRequest) error
	Recv() (*FulcrumResponse, error)
	grpc.ClientStream
}

type fulcrumServiceRequestConnectionFulcrumClient struct {
	grpc.ClientStream
}

func (x *fulcrumServiceRequestConnectionFulcrumClient) Send(m *FulcrumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fulcrumServiceRequestConnectionFulcrumClient) Recv() (*FulcrumResponse, error) {
	m := new(FulcrumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fulcrumServiceClient) GetFile(ctx context.Context, opts ...grpc.CallOption) (FulcrumService_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FulcrumService_serviceDesc.Streams[2], "/fulcrum.FulcrumService/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fulcrumServiceGetFileClient{stream}
	return x, nil
}

type FulcrumService_GetFileClient interface {
	Send(*FulcrumRequest) error
	Recv() (*FulcrumResponse, error)
	grpc.ClientStream
}

type fulcrumServiceGetFileClient struct {
	grpc.ClientStream
}

func (x *fulcrumServiceGetFileClient) Send(m *FulcrumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fulcrumServiceGetFileClient) Recv() (*FulcrumResponse, error) {
	m := new(FulcrumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fulcrumServiceClient) SendFile(ctx context.Context, opts ...grpc.CallOption) (FulcrumService_SendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FulcrumService_serviceDesc.Streams[3], "/fulcrum.FulcrumService/SendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fulcrumServiceSendFileClient{stream}
	return x, nil
}

type FulcrumService_SendFileClient interface {
	Send(*FulcrumRequest) error
	Recv() (*FulcrumResponse, error)
	grpc.ClientStream
}

type fulcrumServiceSendFileClient struct {
	grpc.ClientStream
}

func (x *fulcrumServiceSendFileClient) Send(m *FulcrumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fulcrumServiceSendFileClient) Recv() (*FulcrumResponse, error) {
	m := new(FulcrumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fulcrumServiceClient) GetFileList(ctx context.Context, opts ...grpc.CallOption) (FulcrumService_GetFileListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FulcrumService_serviceDesc.Streams[4], "/fulcrum.FulcrumService/GetFileList", opts...)
	if err != nil {
		return nil, err
	}
	x := &fulcrumServiceGetFileListClient{stream}
	return x, nil
}

type FulcrumService_GetFileListClient interface {
	Send(*FulcrumRequest) error
	Recv() (*FulcrumResponse, error)
	grpc.ClientStream
}

type fulcrumServiceGetFileListClient struct {
	grpc.ClientStream
}

func (x *fulcrumServiceGetFileListClient) Send(m *FulcrumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fulcrumServiceGetFileListClient) Recv() (*FulcrumResponse, error) {
	m := new(FulcrumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fulcrumServiceClient) GetClock(ctx context.Context, opts ...grpc.CallOption) (FulcrumService_GetClockClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FulcrumService_serviceDesc.Streams[5], "/fulcrum.FulcrumService/GetClock", opts...)
	if err != nil {
		return nil, err
	}
	x := &fulcrumServiceGetClockClient{stream}
	return x, nil
}

type FulcrumService_GetClockClient interface {
	Send(*FulcrumRequest) error
	Recv() (*FulcrumResponse, error)
	grpc.ClientStream
}

type fulcrumServiceGetClockClient struct {
	grpc.ClientStream
}

func (x *fulcrumServiceGetClockClient) Send(m *FulcrumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fulcrumServiceGetClockClient) Recv() (*FulcrumResponse, error) {
	m := new(FulcrumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fulcrumServiceClient) SendClock(ctx context.Context, opts ...grpc.CallOption) (FulcrumService_SendClockClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FulcrumService_serviceDesc.Streams[6], "/fulcrum.FulcrumService/SendClock", opts...)
	if err != nil {
		return nil, err
	}
	x := &fulcrumServiceSendClockClient{stream}
	return x, nil
}

type FulcrumService_SendClockClient interface {
	Send(*FulcrumRequest) error
	Recv() (*FulcrumResponse, error)
	grpc.ClientStream
}

type fulcrumServiceSendClockClient struct {
	grpc.ClientStream
}

func (x *fulcrumServiceSendClockClient) Send(m *FulcrumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fulcrumServiceSendClockClient) Recv() (*FulcrumResponse, error) {
	m := new(FulcrumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FulcrumServiceServer is the server API for FulcrumService service.
type FulcrumServiceServer interface {
	ConnectionBrokerFulcrum(FulcrumService_ConnectionBrokerFulcrumServer) error
	RequestConnectionFulcrum(FulcrumService_RequestConnectionFulcrumServer) error
	GetFile(FulcrumService_GetFileServer) error
	SendFile(FulcrumService_SendFileServer) error
	GetFileList(FulcrumService_GetFileListServer) error
	GetClock(FulcrumService_GetClockServer) error
	SendClock(FulcrumService_SendClockServer) error
}

// UnimplementedFulcrumServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFulcrumServiceServer struct {
}

func (*UnimplementedFulcrumServiceServer) ConnectionBrokerFulcrum(FulcrumService_ConnectionBrokerFulcrumServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectionBrokerFulcrum not implemented")
}
func (*UnimplementedFulcrumServiceServer) RequestConnectionFulcrum(FulcrumService_RequestConnectionFulcrumServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestConnectionFulcrum not implemented")
}
func (*UnimplementedFulcrumServiceServer) GetFile(FulcrumService_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (*UnimplementedFulcrumServiceServer) SendFile(FulcrumService_SendFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (*UnimplementedFulcrumServiceServer) GetFileList(FulcrumService_GetFileListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFileList not implemented")
}
func (*UnimplementedFulcrumServiceServer) GetClock(FulcrumService_GetClockServer) error {
	return status.Errorf(codes.Unimplemented, "method GetClock not implemented")
}
func (*UnimplementedFulcrumServiceServer) SendClock(FulcrumService_SendClockServer) error {
	return status.Errorf(codes.Unimplemented, "method SendClock not implemented")
}

func RegisterFulcrumServiceServer(s *grpc.Server, srv FulcrumServiceServer) {
	s.RegisterService(&_FulcrumService_serviceDesc, srv)
}

func _FulcrumService_ConnectionBrokerFulcrum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FulcrumServiceServer).ConnectionBrokerFulcrum(&fulcrumServiceConnectionBrokerFulcrumServer{stream})
}

type FulcrumService_ConnectionBrokerFulcrumServer interface {
	Send(*FulcrumResponse) error
	Recv() (*FulcrumRequest, error)
	grpc.ServerStream
}

type fulcrumServiceConnectionBrokerFulcrumServer struct {
	grpc.ServerStream
}

func (x *fulcrumServiceConnectionBrokerFulcrumServer) Send(m *FulcrumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fulcrumServiceConnectionBrokerFulcrumServer) Recv() (*FulcrumRequest, error) {
	m := new(FulcrumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FulcrumService_RequestConnectionFulcrum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FulcrumServiceServer).RequestConnectionFulcrum(&fulcrumServiceRequestConnectionFulcrumServer{stream})
}

type FulcrumService_RequestConnectionFulcrumServer interface {
	Send(*FulcrumResponse) error
	Recv() (*FulcrumRequest, error)
	grpc.ServerStream
}

type fulcrumServiceRequestConnectionFulcrumServer struct {
	grpc.ServerStream
}

func (x *fulcrumServiceRequestConnectionFulcrumServer) Send(m *FulcrumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fulcrumServiceRequestConnectionFulcrumServer) Recv() (*FulcrumRequest, error) {
	m := new(FulcrumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FulcrumService_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FulcrumServiceServer).GetFile(&fulcrumServiceGetFileServer{stream})
}

type FulcrumService_GetFileServer interface {
	Send(*FulcrumResponse) error
	Recv() (*FulcrumRequest, error)
	grpc.ServerStream
}

type fulcrumServiceGetFileServer struct {
	grpc.ServerStream
}

func (x *fulcrumServiceGetFileServer) Send(m *FulcrumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fulcrumServiceGetFileServer) Recv() (*FulcrumRequest, error) {
	m := new(FulcrumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FulcrumService_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FulcrumServiceServer).SendFile(&fulcrumServiceSendFileServer{stream})
}

type FulcrumService_SendFileServer interface {
	Send(*FulcrumResponse) error
	Recv() (*FulcrumRequest, error)
	grpc.ServerStream
}

type fulcrumServiceSendFileServer struct {
	grpc.ServerStream
}

func (x *fulcrumServiceSendFileServer) Send(m *FulcrumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fulcrumServiceSendFileServer) Recv() (*FulcrumRequest, error) {
	m := new(FulcrumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FulcrumService_GetFileList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FulcrumServiceServer).GetFileList(&fulcrumServiceGetFileListServer{stream})
}

type FulcrumService_GetFileListServer interface {
	Send(*FulcrumResponse) error
	Recv() (*FulcrumRequest, error)
	grpc.ServerStream
}

type fulcrumServiceGetFileListServer struct {
	grpc.ServerStream
}

func (x *fulcrumServiceGetFileListServer) Send(m *FulcrumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fulcrumServiceGetFileListServer) Recv() (*FulcrumRequest, error) {
	m := new(FulcrumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FulcrumService_GetClock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FulcrumServiceServer).GetClock(&fulcrumServiceGetClockServer{stream})
}

type FulcrumService_GetClockServer interface {
	Send(*FulcrumResponse) error
	Recv() (*FulcrumRequest, error)
	grpc.ServerStream
}

type fulcrumServiceGetClockServer struct {
	grpc.ServerStream
}

func (x *fulcrumServiceGetClockServer) Send(m *FulcrumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fulcrumServiceGetClockServer) Recv() (*FulcrumRequest, error) {
	m := new(FulcrumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FulcrumService_SendClock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FulcrumServiceServer).SendClock(&fulcrumServiceSendClockServer{stream})
}

type FulcrumService_SendClockServer interface {
	Send(*FulcrumResponse) error
	Recv() (*FulcrumRequest, error)
	grpc.ServerStream
}

type fulcrumServiceSendClockServer struct {
	grpc.ServerStream
}

func (x *fulcrumServiceSendClockServer) Send(m *FulcrumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fulcrumServiceSendClockServer) Recv() (*FulcrumRequest, error) {
	m := new(FulcrumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FulcrumService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fulcrum.FulcrumService",
	HandlerType: (*FulcrumServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectionBrokerFulcrum",
			Handler:       _FulcrumService_ConnectionBrokerFulcrum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RequestConnectionFulcrum",
			Handler:       _FulcrumService_RequestConnectionFulcrum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _FulcrumService_GetFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendFile",
			Handler:       _FulcrumService_SendFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFileList",
			Handler:       _FulcrumService_GetFileList_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetClock",
			Handler:       _FulcrumService_GetClock_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendClock",
			Handler:       _FulcrumService_SendClock_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fulcrum.proto",
}
